swagger: "2.0"
info:
  description: "This is API Endpoints documentation for Worker"
  version: "1.0.5"
  title: "Worker Application"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "horppes.web@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
- name: "User Service"
  description: "Operations about Users"
- name: "Auth Service"
  description: "Athentication Operations"
- name: "user"
  description: "Operations about user"
schemes:
- "https"
- "http"
paths:
  /login:
    post:
      tags:
      - "Auth Service"
      summary: "Login to worker"
      description: ""
      operationId: "login"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "loginPayload"
        description: "Login Payload"
        required: true
        schema:
          $ref: "#/definitions/LoginPayload"
      responses:
        200:
          description: "Login successful"
          headers:
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
          schema:
            $ref: "#/definitions/TokenResponse"
        400:
          description: "Invalid username/password supplied"
        405:
          description: "Invalid input"
          
      # security:
      # - petstore_auth:
      #   - "write:pets"
      #   - "read:pets"
    
  /user/logout:
    get:
      tags:
      - "Auth Service"
      summary: "Logs out current logged in user and invalidates token"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "User logged out"
        default:
          description: "successful operation"
  /user?:
    get:
      tags:
      - "Auth Service"
      - "User Service"
      summary: "Get user details"
      description: "This can only be done by the logged in user."
      operationId: "getUserDetails"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "header"
        name: "Authorization"
        description: "Bearer Token"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user:
    post:
      tags:
        - "Auth Service"
      summary: "Sign up for worker"
      description: "Sign up for worker"
      operationId: "signUp"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "signUpPayload"
        description: "Sign Up Payload"
        required: true
        schema:
          $ref: "#/definitions/SignUpPayload"
      responses:
        200:
          description: "Signup successful"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username/password supplied"
        405:
          description: "Invalid input"
    
    /user/exists:
      get:
        tags:
          - "Auth Service"
          - "User Service"
        summary: "Check if user exists"
        description: "Check if user exists by username or email. \
        \ At least one parameter is required"
        operationId: "userExists"
        consumes:
        - "application/json"
        produces:
        - "application/json"
        parameters:
        - in: "body"
          name: "username"
          description: "Username (required if email is not present)"
          required: false
          schema:
            type: "string"
        responses:
          200:
            description: "User exists check result"
            schema:
              type: 'boolean'
          400:
            description: "Invalid username/password supplied"
          405:
            description: "Invalid input"
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
  # petstore_auth:
  #   type: "oauth2"
  #   authorizationUrl: "https://petstore.swagger.io/oauth/authorize"
  #   flow: "implicit"
  #   scopes:
  #     read:pets: "read your pets"
  #     write:pets: "modify pets in your account"
definitions:
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
  
  LoginPayload:
    type: "object"
    properties:
      username:
        type: "string"
      password:
        type: "string"
  
  SignUpPayload:
    type: "object"
    properties:
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      username:
        type: "string"
      password:
        type: "string"

  TokenResponse:
    type: "object"
    properties:
      token:
        type: "string"
    xml:
      name: "TokenResponse"
  
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
    xml:
      name: "User"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
